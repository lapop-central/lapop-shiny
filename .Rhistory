scale_fill_manual(breaks = "other",
values = fill_values,
labels = paste0(" <span style='color:#585860; font-size:13pt'> ",
subtitle,
"<span style='color:#FFFFFF00'>-----------</span>",
ci_text),
na.value = paste0(color_scheme, "90")) +
scale_y_continuous(limits = c(ymin, ymax), expand = expansion(mult = 0.002)) +
labs(title=main_title,
y = "",
x = "",
caption = paste0(ifelse(lang == "es", "Fuente: LAPOP Lab", "Source: LAPOP Lab"),
source_info)) +
theme(text = element_text(size = 14, family = "roboto"),
plot.title = element_text(size = 18, family = "nunito", face = "bold"),
plot.caption = element_text(size = 10.5, vjust = 2, hjust = 0, family = "nunito", color="#585860"),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line.x = element_line(linewidth = 0.6, linetype = "solid", colour = "#dddddf"),
axis.text = element_text(size = 14, color = "#585860", face = "bold"),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.justification='left',
legend.margin = margin(t=0, b=0, l=0, r=0),
legend.text = element_markdown(family = "nunito-light"))
}
lapop_cc2 <- function(data, outcome_var = data$prop, lower_bound = data$lb, vallabel = data$vallabel,
upper_bound = data$ub, label_var = data$proplabel,
ymin = 0,
ymax = 100,
lang = "en",
highlight = "",
main_title = "",
source_info = "",
subtitle = "",
sort = "",
color_scheme = "#784885",
label_size = 5){
if(all(highlight != "")){
data$hl_var = factor(ifelse(vallabel %in% highlight, 0, 1), labels = c("hl", "other"))
fill_values = c(paste0(color_scheme, "47"), paste0(color_scheme, "20"))
}
else{
data$hl_var = factor("other")
fill_values = paste0(color_scheme, "47")
}
if(sort == "hi-lo"){
data = data[order(-data$prop),]
} else if(sort == "lo-hi"){
data = data[order(data$prop),]
} else if(sort == "alpha"){
data = data[order(data$vallabel),]
}
if(sort == "hi-lo"){
data = data[order(-data$prop),]
} else if(sort == "lo-hi"){
data = data[order(data$prop),]
} else if(sort == "alpha"){
data = data[order(data$vallabel),]
}
ci_text = ifelse(lang == "es",
paste0(" <span style='color:", color_scheme, "; font-size:18pt'> \u0131\u2014\u0131</span> ",
"<span style='color:#585860; font-size:13pt'>95% intervalo de confianza </span>"),
ifelse(lang == "fr",
paste0(" <span style='color:", color_scheme, "; font-size:18pt'> \u0131\u2014\u0131</span> ",
"<span style='color:#585860; font-size:13pt'>Intervalle de confiance de 95% </span>"),
paste0(" <span style='color:", color_scheme, "; font-size:18pt'> \u0131\u2014\u0131</span> ",
"<span style='color:#585860; font-size:13pt'>95% confidence </span>",
"<span style='color:#585860'>interval</span>")))
update_geom_defaults("text", list(family = "roboto"))
ggplot(data=data, aes(x=factor(vallabel, levels = vallabel), y=prop, fill = hl_var)) +
geom_bar(stat="identity", color = color_scheme, width = 0.6) +
geom_text(aes(y = ifelse(upper_bound >= 85, lb, ub),
label = label_var,
vjust = ifelse(outcome_var >= 85, 1, -0.5)),
size=label_size, fontface = "bold", color = color_scheme) +
geom_errorbar(aes(ymin=lower_bound, ymax=upper_bound), width = 0.15, color = color_scheme, linetype = "solid") +
scale_fill_manual(breaks = "other",
values = fill_values,
labels = paste0(" <span style='color:#585860; font-size:13pt'> ",
subtitle,
"<span style='color:#FFFFFF00'>-----------</span>",
ci_text),
na.value = paste0(color_scheme, "90")) +
scale_y_continuous(limits = c(ymin, ymax), expand = expansion(mult = 0.002)) +
labs(title=main_title,
y = "",
x = "",
caption = paste0(ifelse(lang == "es", "Fuente: LAPOP Lab", "Source: LAPOP Lab"),
source_info)) +
theme(text = element_text(size = 14, family = "roboto"),
plot.title = element_text(size = 18, family = "nunito", face = "bold"),
plot.caption = element_text(size = 10.5, vjust = 2, hjust = 0, family = "nunito", color="#585860"),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line.x = element_line(linewidth = 0.6, linetype = "solid", colour = "#dddddf"),
axis.text = element_text(size = 14, color = "#585860", face = "bold"),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.justification='left',
legend.margin = margin(t=0, b=0, l=0, r=0),
legend.text = element_markdown(family = "nunito-light"))
}
ing4_mover <- lpr_mover(jam, outcome = "ing4", grouping_vars = c("q1tc", "pn4"),
rec = c(3, 7))
ing4_cc <- lpr_cc(ym23, outcome = "ing4", rec = c(4, 7))
ing4_cc
lapop_cc(ing4_cc)
ym <- ym23 %>%
filter(!(pais %in% c(26, 40, 41)))
lapop_cc2 <- function(data, outcome_var = data$prop, lower_bound = data$lb, vallabel = data$vallabel,
upper_bound = data$ub, label_var = data$proplabel,
ymin = 0,
ymax = 100,
lang = "en",
highlight = "",
main_title = "",
source_info = "",
subtitle = "",
sort = "",
color_scheme = "#784885",
label_size = 5){
if(all(highlight != "")){
data$hl_var = factor(ifelse(vallabel %in% highlight, 0, 1), labels = c("hl", "other"))
fill_values = c(paste0(color_scheme, "47"), paste0(color_scheme, "20"))
}
else{
data$hl_var = factor("other")
fill_values = paste0(color_scheme, "47")
}
if(sort == "hi-lo"){
data = data[order(-data$prop),]
} else if(sort == "lo-hi"){
data = data[order(data$prop),]
} else if(sort == "alpha"){
data = data[order(data$vallabel),]
}
if(sort == "hi-lo"){
data = data[order(-data$prop),]
} else if(sort == "lo-hi"){
data = data[order(data$prop),]
} else if(sort == "alpha"){
data = data[order(data$vallabel),]
}
ci_text = ifelse(lang == "es",
paste0(" <span style='color:", color_scheme, "; font-size:18pt'> \u0131\u2014\u0131</span> ",
"<span style='color:#585860; font-size:13pt'>95% intervalo de confianza </span>"),
ifelse(lang == "fr",
paste0(" <span style='color:", color_scheme, "; font-size:18pt'> \u0131\u2014\u0131</span> ",
"<span style='color:#585860; font-size:13pt'>Intervalle de confiance de 95% </span>"),
paste0(" <span style='color:", color_scheme, "; font-size:18pt'> \u0131\u2014\u0131</span> ",
"<span style='color:#585860; font-size:13pt'>95% confidence </span>",
"<span style='color:#585860'>interval</span>")))
update_geom_defaults("text", list(family = "roboto"))
ggplot(data=data, aes(x=factor(vallabel, levels = vallabel), y=prop, fill = hl_var)) +
geom_bar(stat="identity", color = color_scheme, width = 0.6) +
geom_text(aes(y = ifelse(upper_bound >= 85, lower_bound, upper_bound),
label = label_var,
vjust = ifelse(outcome_var >= 85, 1, -0.5)),
size=label_size, fontface = "bold", color = color_scheme) +
geom_errorbar(aes(ymin=lower_bound, ymax=upper_bound), width = 0.15, color = color_scheme, linetype = "solid") +
scale_fill_manual(breaks = "other",
values = fill_values,
labels = paste0(" <span style='color:#585860; font-size:13pt'> ",
subtitle,
"<span style='color:#FFFFFF00'>-----------</span>",
ci_text),
na.value = paste0(color_scheme, "90")) +
scale_y_continuous(limits = c(ymin, ymax), expand = expansion(mult = 0.002)) +
labs(title=main_title,
y = "",
x = "",
caption = paste0(ifelse(lang == "es", "Fuente: LAPOP Lab", "Source: LAPOP Lab"),
source_info)) +
theme(text = element_text(size = 14, family = "roboto"),
plot.title = element_text(size = 18, family = "nunito", face = "bold"),
plot.caption = element_text(size = 10.5, vjust = 2, hjust = 0, family = "nunito", color="#585860"),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line.x = element_line(linewidth = 0.6, linetype = "solid", colour = "#dddddf"),
axis.text = element_text(size = 14, color = "#585860", face = "bold"),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.justification='left',
legend.margin = margin(t=0, b=0, l=0, r=0),
legend.text = element_markdown(family = "nunito-light"))
}
ing4_cc <- lpr_cc2(ym23, outcome = "ing4", rec = c(4, 7))
lapop_cc2(ing4_cc)
ing4_cc <- lpr_cc(ym, outcome = "ing4", rec = c(4, 7))
lapop_cc2(ing4_cc)
lapop_cc2 <- function(data, outcome_var = data$prop, lower_bound = data$lb, vallabel = data$vallabel,
upper_bound = data$ub, label_var = data$proplabel,
ymin = 0,
ymax = 100,
lang = "en",
highlight = "",
main_title = "",
source_info = "",
subtitle = "",
sort = "",
color_scheme = "#784885",
label_size = 5){
if(all(highlight != "")){
data$hl_var = factor(ifelse(vallabel %in% highlight, 0, 1), labels = c("hl", "other"))
fill_values = c(paste0(color_scheme, "47"), paste0(color_scheme, "20"))
}
else{
data$hl_var = factor("other")
fill_values = paste0(color_scheme, "47")
}
if(sort == "hi-lo"){
data = data[order(-data$prop),]
} else if(sort == "lo-hi"){
data = data[order(data$prop),]
} else if(sort == "alpha"){
data = data[order(data$vallabel),]
}
if(sort == "hi-lo"){
data = data[order(-data$prop),]
} else if(sort == "lo-hi"){
data = data[order(data$prop),]
} else if(sort == "alpha"){
data = data[order(data$vallabel),]
}
ci_text = ifelse(lang == "es",
paste0(" <span style='color:", color_scheme, "; font-size:18pt'> \u0131\u2014\u0131</span> ",
"<span style='color:#585860; font-size:13pt'>95% intervalo de confianza </span>"),
ifelse(lang == "fr",
paste0(" <span style='color:", color_scheme, "; font-size:18pt'> \u0131\u2014\u0131</span> ",
"<span style='color:#585860; font-size:13pt'>Intervalle de confiance de 95% </span>"),
paste0(" <span style='color:", color_scheme, "; font-size:18pt'> \u0131\u2014\u0131</span> ",
"<span style='color:#585860; font-size:13pt'>95% confidence </span>",
"<span style='color:#585860'>interval</span>")))
update_geom_defaults("text", list(family = "roboto"))
ggplot(data=data, aes(x=factor(vallabel, levels = vallabel), y=prop, fill = hl_var)) +
geom_bar(stat="identity", color = color_scheme, width = 0.6) +
geom_text(aes(y = ifelse(upper_bound >= 85, lower_bound, upper_bound),
label = label_var,
vjust = ifelse(upper_bound >= 85, 1.5, -0.5)),
size=label_size, fontface = "bold", color = color_scheme) +
geom_errorbar(aes(ymin=lower_bound, ymax=upper_bound), width = 0.15, color = color_scheme, linetype = "solid") +
scale_fill_manual(breaks = "other",
values = fill_values,
labels = paste0(" <span style='color:#585860; font-size:13pt'> ",
subtitle,
"<span style='color:#FFFFFF00'>-----------</span>",
ci_text),
na.value = paste0(color_scheme, "90")) +
scale_y_continuous(limits = c(ymin, ymax), expand = expansion(mult = 0.002)) +
labs(title=main_title,
y = "",
x = "",
caption = paste0(ifelse(lang == "es", "Fuente: LAPOP Lab", "Source: LAPOP Lab"),
source_info)) +
theme(text = element_text(size = 14, family = "roboto"),
plot.title = element_text(size = 18, family = "nunito", face = "bold"),
plot.caption = element_text(size = 10.5, vjust = 2, hjust = 0, family = "nunito", color="#585860"),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line.x = element_line(linewidth = 0.6, linetype = "solid", colour = "#dddddf"),
axis.text = element_text(size = 14, color = "#585860", face = "bold"),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.justification='left',
legend.margin = margin(t=0, b=0, l=0, r=0),
legend.text = element_markdown(family = "nunito-light"))
}
ing4_cc <- lpr_cc(ym, outcome = "ing4", rec = c(4, 7))
lapop_cc2(ing4_cc)
lapop::lapop_cc(ing4_cc)
ing4_fig <- lapop_ts2(ing4_dta)
ing4_fig
ing4_fig <- lapop_ts(ing4_dta)
ing4_fig
ing4_fig <- lapop::lapop_ts(ing4_dta)
ing4_fig
ing4_fig <- lapop::lapop_ts(ing4_dta, ymax = 105)
ing4_fig
ing4_fig <- lapop::lapop_ts(ing4_dta, ymax = 109)
ing4_fig
ing4_fig <- lapop::lapop_ts(ing4_dta, ymax = 109)
ing4_fig
ing4_fig <- lapop::lapop_ts(ing4_dta, ymax = 110)
ing4_fig
ing4_fig <- lapop::lapop_ts(ing4_dta, ymax = 111)
ing4_fig
ing4_fig <- lapop::lapop_ts(ing4_dta, ymax = 109)
ing4_fig
lapop::lapop_mover2(ing4_mover)
lapop::lapop_mover(ing4_mover)
lapop::lapop_mover(ing4_mover, ymax = 109)
any(ing4_mover$ub > 78)
runApp('Documents/GitHub/lapop-shiny')
runApp('Documents/GitHub/lapop-shiny')
lapop_cc <- function(data, outcome_var = data$prop, lower_bound = data$lb, vallabel = data$vallabel,
upper_bound = data$ub, label_var = data$proplabel,
ymin = 0,
ymax = 100,
lang = "en",
highlight = "",
main_title = "",
source_info = "",
subtitle = "",
sort = "",
color_scheme = "#784885",
label_size = 5){
if(all(highlight != "")){
data$hl_var = factor(ifelse(vallabel %in% highlight, 0, 1), labels = c("hl", "other"))
fill_values = c(paste0(color_scheme, "47"), paste0(color_scheme, "20"))
}
else{
data$hl_var = factor("other")
fill_values = paste0(color_scheme, "47")
}
if(sort == "hi-lo"){
data = data[order(-data$prop),]
} else if(sort == "lo-hi"){
data = data[order(data$prop),]
} else if(sort == "alpha"){
data = data[order(data$vallabel),]
}
if(sort == "hi-lo"){
data = data[order(-data$prop),]
} else if(sort == "lo-hi"){
data = data[order(data$prop),]
} else if(sort == "alpha"){
data = data[order(data$vallabel),]
}
ci_text = ifelse(lang == "es",
paste0(" <span style='color:", color_scheme, "; font-size:18pt'> \u0131\u2014\u0131</span> ",
"<span style='color:#585860; font-size:13pt'>95% intervalo de confianza </span>"),
ifelse(lang == "fr",
paste0(" <span style='color:", color_scheme, "; font-size:18pt'> \u0131\u2014\u0131</span> ",
"<span style='color:#585860; font-size:13pt'>Intervalle de confiance de 95% </span>"),
paste0(" <span style='color:", color_scheme, "; font-size:18pt'> \u0131\u2014\u0131</span> ",
"<span style='color:#585860; font-size:13pt'>95% confidence </span>",
"<span style='color:#585860'>interval</span>")))
update_geom_defaults("text", list(family = "roboto"))
ggplot(data=data, aes(x=factor(vallabel, levels = vallabel), y=prop, fill = hl_var)) +
geom_bar(stat="identity", color = color_scheme, width = 0.6) +
geom_text(aes(label=label_var, y = upper_bound), vjust= -0.5,
size=label_size, fontface = "bold", color = color_scheme) +
geom_errorbar(aes(ymin=lower_bound, ymax=upper_bound), width = 0.15, color = color_scheme, linetype = "solid") +
scale_fill_manual(breaks = "other",
values = fill_values,
labels = paste0(" <span style='color:#585860; font-size:13pt'> ",
subtitle,
"<span style='color:#FFFFFF00'>-----------</span>",
ci_text),
na.value = paste0(color_scheme, "90")) +
scale_y_continuous(limits = c(ymin, ymax), expand = expansion(mult = 0.002)) +
labs(title=main_title,
y = "",
x = "",
caption = paste0(ifelse(lang == "es", "Fuente: LAPOP Lab", "Source: LAPOP Lab"),
source_info)) +
theme(text = element_text(size = 14, family = "roboto"),
plot.title = element_text(size = 18, family = "nunito", face = "bold"),
plot.caption = element_text(size = 10.5, vjust = 2, hjust = 0, family = "nunito", color="#585860"),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line.x = element_line(linewidth = 0.6, linetype = "solid", colour = "#dddddf"),
axis.text = element_text(size = 14, color = "#585860", face = "bold"),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.justification='left',
legend.margin = margin(t=0, b=0, l=0, r=0),
legend.text = element_markdown(family = "nunito-light"))
}
runApp('Documents/GitHub/lapop-shiny')
runApp('Documents/GitHub/lapop-shiny')
runApp('Documents/GitHub/lapop-shiny')
any(ing4_cc$prop > 90)
ifelse(any(ing4_cc$prop > 90), 110, 100)
runApp('Documents/GitHub/lapop-shiny')
?lapop_hist
runApp('Documents/GitHub/lapop-shiny')
runApp('Documents/GitHub/lapop-shiny')
lapop_ts <- function(data, outcome_var = data$prop, lower_bound = data$lb,
upper_bound = data$ub, wave_var = as.character(data$wave),
label_var = data$proplabel, point_var = data$prop,
ymin = 0,
ymax = 100,
main_title = "",
source_info = "",
subtitle = "",
lang = "en",
color_scheme = "#A43D6A",
percentages = TRUE,
label_vjust = -2.1){
#interpolate data for missing waves are still plotted on the x-axis (without data)
if(sum(is.na(outcome_var)) > 0) {
outcome_var = zoo::na.approx(outcome_var)
lower_bound = zoo::na.approx(lower_bound)
upper_bound = zoo::na.approx(upper_bound)
}
#now we stop dealing with missing data
ci_text = ifelse(lang == "es",
paste0(" <span style='color:", color_scheme, "; font-size:18pt'> \u2013 \u2013 \u2013</span> ",
"<span style='color:#585860; font-size:13pt'>95% intervalo de confianza </span>"),
ifelse(lang == "fr",
paste0(" <span style='color:", color_scheme, "; font-size:18pt'> \u2013 \u2013 \u2013</span> ",
"<span style='color:#585860; font-size:13pt'>Intervalle de confiance de 95% </span>"),
paste0(" <span style='color:", color_scheme, "; font-size:18pt'> \u2013 \u2013 \u2013</span> ",
"<span style='color:#585860; font-size:13pt'>95% confidence </span>",
"<span style='color:#585860'>interval</span>")))
#and turn to creating the graph
update_geom_defaults("text", list(family = "roboto"))
ggplot(data=data, aes(x=wave_var, y=outcome_var)) +
geom_line(aes(group = 1), color=color_scheme, linewidth = 1, alpha=0.48) +
geom_line(aes(group = 1, y =lower_bound), color=color_scheme, linewidth = 1, alpha=0.48, lty="dashed") +
geom_line(aes(group = 1, y= upper_bound), color=color_scheme, linewidth = 1, alpha=0.48, lty="dashed") +
geom_point(aes(y = point_var, color = " "), size = 3.5, alpha=0.48, key_glyph = "point") +
scale_color_manual(values = color_scheme,
labels = paste0("<span style='color:#585860; font-size:13pt'> ",
subtitle,
"<span style='color:#FFFFFF00'>-----------</span>",
ci_text)) +
geom_text(aes(label=label_var), family = "roboto", color=color_scheme,
fontface = "bold", size = 5, vjust = label_vjust) +
scale_x_discrete(limits = wave_var) +
{
if (percentages) {
scale_y_continuous(limits=c(ymin, ymax),
breaks = seq(ymin, ymax, ifelse(ymax - ymin <= 50, 10, 20)),
labels = paste(seq(ymin,ymax, ifelse(ymax - ymin <= 50, 10, 20)),
"%", sep=""),
expand = c(0,0))
}
else {
scale_y_continuous(limits=c(ymin, ymax),
expand = c(0,0))
}
} +
labs(title = main_title,
caption = paste0(ifelse(lang == "es", "Fuente: LAPOP Lab", "Source: LAPOP Lab"),
source_info),
x = " ",
y = " ") +
theme_minimal() +
theme(text = element_text(size = 14, family = "roboto"),
plot.title = element_text(size = 18, family = "nunito", face = "bold"),
plot.caption = element_text(size = 10.5, vjust = 2, hjust = 0, family = "nunito", color="#585860"),
axis.title.y = element_blank(),
axis.text = element_text(size = 14, color = "#585860"),
panel.grid.major = element_line(color = "#dddddf", linewidth = 0.5),
panel.grid.minor = element_line(color = "#dddddf", linewidth = 0.5),
panel.border = element_rect(color = "#dddddf", fill = NA, linewidth = 1.0),
legend.position = "top",
plot.title.position = "plot",
plot.caption.position = "plot",
legend.title = element_blank(),
legend.justification='left',
legend.margin = margin(t=0, b=0, l=-40, r=0),
legend.text=element_markdown(family = "nunito-light"))
}
runApp('Documents/GitHub/lapop-shiny')
roxygen2::roxygenise()
devtools::install_github("lapop-central/lapop")
shiny::runApp('Documents/GitHub/lapop-shiny')
install.packages("shiny.i18n")
library(shiny.i18n)
i18n$get_languages()
i18n <- Translator$new(translation_csvs_path = "translation_data/")
i18n <- Translator$new(translation_csvs_path = "translation_data/")
i18n <- Translator$new(translation_csvs_path = "translation_data/")
i18n <- Translator$new(translation_csvs_path = "translations/")
?Translator
getwd()
setwd("C:\Users\plutowl\Documents\GitHub\lapop-shiny\translations")
setwd("C:/Users/plutowl/Documents/GitHub/lapop-shiny")
i18n <- Translator$new(translation_csvs_path = "translations/")
i18n$get_languages()
shiny::runApp()
runApp()
i18n$get_languages()
runApp()
translator$get_languages
translator$get_languages
Translator$get_languages
i18n$get_languages
i18n$get_languages()
Translator$get_languages()
runApp()
i18n$get_languages()
runApp()
3+5
runApp()
i18n$get_key_translation()
i18n$get_languages()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("RTools")
library(dplyr)
library(haven)
library(srvyr)
install.packages("srvyr")
