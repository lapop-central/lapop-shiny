<<<<<<< Updated upstream
=======
<<<<<<< Updated upstream
summarise_at(vars("b2r"),
list(~weighted.ttest.ci(., weight1500))) %>%
unnest_wider(col = "b2r") %>%
filter(prop != 0) %>%
mutate(proplabel = paste0(round(prop), "%"))
x
shiny::runApp()
shiny::runApp()
runApp()
5:7
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(lapop)
gm <- readRDS("C:/Users/plutowl/Documents/GitHub/lapop-shiny/gmrstrata.rds")
hist_df = gm %>%
group_by(across(jc10)) %>%
summarise(n = unweighted(n()))  %>%
drop_na() %>%
rename(cat = 1) %>%
mutate(prop = prop.table(n) * 100,
proplabel = paste(round(prop), "%", sep = ""),
cat = str_wrap(as.character(haven::as_factor(cat)), width = 25))
library(dplyr)
hist_df = gm %>%
group_by(across(jc10)) %>%
summarise(n = unweighted(n()))  %>%
drop_na() %>%
rename(cat = 1) %>%
mutate(prop = prop.table(n) * 100,
proplabel = paste(round(prop), "%", sep = ""),
cat = str_wrap(as.character(haven::as_factor(cat)), width = 25))
library(tidyr)
hist_df = gm %>%
group_by(across(jc10)) %>%
summarise(n = unweighted(n()))  %>%
drop_na() %>%
rename(cat = 1) %>%
mutate(prop = prop.table(n) * 100,
proplabel = paste(round(prop), "%", sep = ""),
cat = str_wrap(as.character(haven::as_factor(cat)), width = 25))
=======
>>>>>>> Stashed changes
library(srvyr)
hist_df = gm %>%
group_by(across(jc10)) %>%
summarise(n = unweighted(n()))  %>%
drop_na() %>%
rename(cat = 1) %>%
mutate(prop = prop.table(n) * 100,
proplabel = paste(round(prop), "%", sep = ""),
cat = str_wrap(as.character(haven::as_factor(cat)), width = 25))
library(stringr)
hist_df = gm %>%
group_by(across(jc10)) %>%
summarise(n = unweighted(n()))  %>%
drop_na() %>%
rename(cat = 1) %>%
mutate(prop = prop.table(n) * 100,
proplabel = paste(round(prop), "%", sep = ""),
cat = str_wrap(as.character(haven::as_factor(cat)), width = 25))
hist_df
hist_df
shiny::runApp()
weighted.ttest.ci <- function(x, weights) {
nx <- length(x)
vx <- Hmisc::wtd.var(x, weights, normwt = TRUE, na.rm = TRUE) ## From Hmisc
mx <- weighted.mean(x, weights, na.rm = TRUE)
stderr <- sqrt(vx/nx)
>>>>>>> Stashed changes
tstat <- mx/stderr ## not mx - mu
cint <- qt(1 - 0.05/2, nx - 1)
cint <- tstat + c(-cint, cint)
confint = cint * stderr
result = data.frame(prop = mx, lb = confint[1], ub = confint[2])
return(result)
}
# helper function for mover
process_data <- function(data, outcome_var, recode_range, group_var, var_label, weight_var = "weight1500") {
if (is.null(group_var)) {
return(NULL)
}
processed_data <- data %>%
drop_na(!!sym(outcome_var)) %>%
mutate(outcome_rec = case_when(
is.na(!!sym(outcome_var)) ~ NA_real_,
!!sym(outcome_var) >= recode_range[1] & !!sym(outcome_var) <= recode_range[2] ~ 100,
TRUE ~ 0
)) %>%
group_by(vallabel = haven::as_factor(zap_missing(!!sym(group_var)))) %>%
summarise_at(vars("outcome_rec"), list(~weighted.ttest.ci(., !!sym(weight_var)))) %>%
unnest_wider(col = "outcome_rec") %>%
mutate(
varlabel = var_label,
proplabel = paste0(round(prop), "%")
) %>%
drop_na(.)
return(processed_data)
}
ui <- fluidPage(
titlePanel(""), # Leave it Empty
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
width = 3,  # Reduce width (default is 4)
selectInput("variable", "Variable",
labs[order(names(labs))],
selected = "ing4"),
pickerInput(inputId = "pais",
label = "Countries",
choices = sort(levels(as_factor(dstrata$pais)[!is.na(dstrata$pais)])),
selected = c("Argentina", "Bolivia", "Brazil", "Chile",
"Colombia", "Costa Rica", "Dominican Republic",
"Ecuador", "El Salvador", "Guatemala", "Haiti",
"Honduras", "Jamaica", "Mexico", "Nicaragua",
"Panama", "Paraguay", "Peru", "Uruguay"),
options = list(`actions-box` = TRUE),
multiple = TRUE),
#this fixes a formatting issue with checkboxGroupInput below
tags$head(
tags$style(
HTML(
".checkbox-inline {
margin-left: 0px;
margin-right: 10px;
}
.checkbox-inline+.checkbox-inline {
margin-left: 0px;
margin-right: 10px;
}
"
)
)
),
#this makes slider input only integers
tags$style(type = "text/css", ".irs-grid-pol.small {height: 0px;}"),
pickerInput(inputId = "wave",
label = "Survey Rounds",
choices = c("2004" = "2004",
"2006" = "2006",
"2008" = "2008",
"2010" = "2010",
"2012" = "2012",
"2014" = "2014",
"2016/17" = "2016/17",
"2018/19" = "2018/19",
"2021" = "2021",
"2023" = "2023"),
selected = c("2006", "2008", "2010", "2012", "2014",
"2016/17", "2018/19", "2021", "2023"),
options = list(`actions-box` = TRUE),
# options = list
multiple = TRUE),
# show recode slider only for time series, cc, and breakdown (not hist)
conditionalPanel(
'input.tabs == "Time Series" | input.tabs == "Cross-Country" | input.tabs == "Breakdown"',
uiOutput("sliderUI"),
),
conditionalPanel(
'input.tabs == "Breakdown"',
selectInput("variable_sec", "Secondary Variable",
c("None" = "None",
labs[order(names(labs))])),
checkboxGroupInput("demog", "Demographic Variables",
c("Gender" = "gendermc",
"Age" = "edad",
"Wealth" = "wealth",
"Education" = "edre",
"Urban/Rural" = "ur"),
selected = c("gendermc", "edad", "edre"),
inline = TRUE)
),
actionButton("go", "Generate")
),
# Main panel for displaying outputs ----
mainPanel(
#width = 8,  # Adjust accordingly (default is 8)
# Output: Formatted text for caption ----
h3(textOutput("caption")),
h5(textOutput("wording")),
h5(textOutput("response")),
tabsetPanel(id = "tabs",
tabPanel("Histogram", plotOutput("hist")),
tabPanel("Time Series", plotOutput("ts")),
tabPanel("Cross-Country", plotOutput("cc")),
tabPanel("Breakdown", plotOutput("mover"))
),
br(),
fluidRow(column(12, "",
downloadButton(outputId = "downloadPlot", label = "Download Figure"),
downloadButton(outputId = "downloadTable", label = "Download Table")))
)
)
)
# Define server logic to plot various variables ----
server <- function(input, output, session) {
formulaText <- reactive({
paste(input$variable)
})
outcome <- reactive({
input$variable
})
variable_sec <- reactive({
input$variable_sec
})
variable_sec_lab <- reactive({
vars_labels$question_short_en[which(vars_labels$column_name == paste(variable_sec()))]
})
sliderParams <- reactiveValues(valuex = c(1, 1))
#set default slider values - 5-7 for 1-7 variable, 2 for 1-2 variable, 3-4 for 1-4 variable, etc.
observeEvent(input$variable, {
if (max(as.numeric(dstrata[[formulaText()]]), na.rm=TRUE) == 7) {
sliderParams$valuex <- c(5, 7)
} else if (max(as.numeric(dstrata[[formulaText()]]), na.rm=TRUE) == 2) {
sliderParams$valuex <- c(2, 2)
} else if (max(as.numeric(dstrata[[formulaText()]]), na.rm=TRUE) == 3) {
sliderParams$valuex <- c(3, 3)
} else if (max(as.numeric(dstrata[[formulaText()]]), na.rm=TRUE) == 4) {
sliderParams$valuex <- c(3, 4)
} else if (max(as.numeric(dstrata[[formulaText()]]), na.rm=TRUE) == 5) {
sliderParams$valuex <- c(4, 5)
} else if (max(as.numeric(dstrata[[formulaText()]]), na.rm=TRUE) == 10) {
sliderParams$valuex <- c(7, 10)
}
})
output$sliderUI <- renderUI({
sliderInput(inputId = "recode",
label = "Response values included in percentage",
min = min(as.numeric(dstrata[[formulaText()]]), na.rm=TRUE),
max = max(as.numeric(dstrata[[formulaText()]]), na.rm=TRUE),
value = sliderParams$valuex,
step = 1)
})
dff <- eventReactive(input$go, ignoreNULL = FALSE, {
dstrata %>%
filter(as_factor(wave) %in% input$wave) %>%
filter(pais_nam %in% input$pais)
})
cap <- renderText({
vars_labels$question_short_en[which(vars_labels$column_name == formulaText())]
})
output$caption <- eventReactive(input$go, ignoreNULL = FALSE, {
cap()
})
word <- renderText({
vars_labels$question_en[which(vars_labels$column_name == formulaText())]
})
output$wording <- eventReactive(input$go, ignoreNULL = FALSE, {
word()
})
resp <- renderText({
vars_labels$responses_en_rec[which(vars_labels$column_name == formulaText())]
})
output$response <- eventReactive(input$go, ignoreNULL = FALSE, {
resp()
})
# SOURCE INFO WITH PAIS and WAVE
source_info_text <- reactive({
# Get country abbreviations that match selected country names
pais_abbr <- dstrata %>%
filter(pais_nam %in% input$pais) %>%
distinct(pais_nam, pais_lab) %>%
arrange(match(pais_nam, input$pais)) %>%  # preserve input order
pull(pais_lab)
pais_display <- paste(pais_abbr, collapse = ", ")
wave_display <- paste(input$wave, collapse = ", ")
if (head(pais_display) > 5) {
paste0(", AmericasBarometer Data Playground\nCountries included: ", pais_display, ".\nYears included: ", wave_display, ".")
} else {
paste0(", AmericasBarometer Data Playground\nCountries included: ", pais_display, ". Years included: ", wave_display, ".")
}
})
source_info_pais <- reactive({
# Get country abbreviations that match selected country names
pais_abbr <- dstrata %>%
filter(pais_nam %in% input$pais) %>%
distinct(pais_nam, pais_lab) %>%
arrange(match(pais_nam, input$pais)) %>%  # preserve input order
pull(pais_lab)
pais_display <- paste(pais_abbr, collapse = ", ")
wave_display <- paste(input$wave, collapse = ", ")
paste0(", AmericasBarometer Data Playground.\nCountries included: ", pais_display, "." )
})
source_info_wave <- reactive({
# Get country abbreviations that match selected country names
pais_abbr <- dstrata %>%
filter(pais_nam %in% input$pais) %>%
distinct(pais_nam, pais_lab) %>%
arrange(match(pais_nam, input$pais)) %>%  # preserve input order
pull(pais_lab)
pais_display <- paste(pais_abbr, collapse = ", ")
wave_display <- paste(input$wave, collapse = ", ")
paste0(", AmericasBarometer Data Playground.\nYears included: ", wave_display, ".")
})
#hist
# must break into data event, graph event, and renderPlot to get download buttons to work
histd <- eventReactive(input$go, ignoreNULL = FALSE, {
hist_df = Error(
dff() %>%
group_by(across(outcome())) %>%
summarise(n = n())  %>%
drop_na() %>%
rename(cat = 1) %>%
mutate(prop = prop.table(n) * 100,
proplabel = paste(round(prop), "%", sep = ""),
cat = str_wrap(as.character(haven::as_factor(cat)), width = 25)))
validate(
need(hist_df, "Error: no data available. Please verify that this question was asked in this country/year combination")
)
return(hist_df)
})
histg <- eventReactive(input$go, ignoreNULL = FALSE, {
histg <- lapop_hist(histd(),
ymax = ifelse(any(histd()$prop > 90), 110, 100),
source_info = source_info_text())
return(histg)
})
output$hist <- renderPlot({
return(histg())
})
#ts
tsd <- eventReactive(input$go, ignoreNULL = FALSE, {
dta_ts = Error(
dff() %>%
drop_na(outcome()) %>%
mutate(outcome_rec = case_when(
is.na(!!sym(outcome())) ~ NA_real_,
!!sym(outcome()) >= input$recode[1] &
!!sym(outcome()) <= input$recode[2] ~ 100,
TRUE ~ 0)) %>%
group_by(as.character(as_factor(wave))) %>%
summarise_at(vars("outcome_rec"),
list(~weighted.ttest.ci(., weight1500))) %>%
unnest_wider(col = "outcome_rec") %>%
mutate(proplabel = paste0(round(prop), "%")) %>%
rename(.,  wave = 1) %>%
filter(prop != 0)
)
validate(
need(dta_ts, "Error: no data available. Please verify that this question was asked in this country/year combination")
)
dta_ts = merge(dta_ts, data.frame(wave = as.character(waves_total), empty = 1), by = "wave", all.y = TRUE)
return(omit_na_edges(dta_ts))
})
tsg <- eventReactive(input$go, ignoreNULL = FALSE, {
tsg = lapop_ts(tsd(),
ymax = ifelse(any(tsd()$prop > 88, na.rm = TRUE), 110, 100),
label_vjust = ifelse(any(tsd()$prop > 80, na.rm = TRUE), -1.1, -1.5),
source_info = source_info_pais(),
subtitle = "% in selected category")
return(tsg)
})
output$ts <- renderPlot({
return(tsg())
})
#cc
ccd <- eventReactive(input$go, ignoreNULL = FALSE, {
dta_cc = Error(
dff() %>%
drop_na(outcome()) %>%
mutate(outcome_rec = case_when(
is.na(!!sym(outcome())) ~ NA_real_,
!!sym(outcome()) >= input$recode[1] &
!!sym(outcome()) <= input$recode[2] ~ 100,
TRUE ~ 0)) %>%
group_by(vallabel = pais_lab) %>%
summarise_at(vars("outcome_rec"),
list(~weighted.ttest.ci(., weight1500))) %>%
unnest_wider(col = "outcome_rec") %>%
filter(prop != 0) %>%
mutate(proplabel = paste0(round(prop), "%"))
)
validate(
need(dta_cc, "Error: no data available. Please verify that this question was asked in this country/year combination")
)
return(dta_cc)
})
ccg <- eventReactive(input$go, ignoreNULL = FALSE, {
ccg = lapop_cc(ccd(), sort = "hi-lo",
subtitle = "% in selected category",
ymax = ifelse(any(ccd()$prop > 90, na.rm = TRUE), 110, 100),
source_info = source_info_wave())
return(ccg)
})
output$cc <- renderPlot({
return(ccg())
})
# Use function for each demographic breakdown variable
secdf <- eventReactive(input$go, ignoreNULL = FALSE, {
if (input$variable_sec == "None") {
NULL
} else {
process_data(
data = dff(),
outcome_var = outcome(),
recode_range = input$recode,
group_var = input$variable_sec,
var_label = str_wrap(variable_sec_lab(), width = 25) # Secondary Variable Label
)
}
})
genderdf <- eventReactive(input$go, ignoreNULL = FALSE, {
if ("gendermc" %in% input$demog) {
process_data(
data = dff(),
outcome_var = outcome(),
recode_range = input$recode,
group_var = "gendermc",
var_label = "Gender"
)
} else {
NULL
}
})
wealthdf <- eventReactive(input$go, ignoreNULL = FALSE, {
if ("wealth" %in% input$demog) {
process_data(
data = dff(),
outcome_var = outcome(),
recode_range = input$recode,
group_var = "wealthf",
var_label = "Wealth"
)
} else {
NULL
}
})
eddf <- eventReactive(input$go, ignoreNULL = FALSE, {
if ("edre" %in% input$demog) {
process_data(
data = dff(),
outcome_var = outcome(),
recode_range = input$recode,
group_var = "edrerf",
var_label = "Education"
)
} else {
NULL
}
})
edaddf <- eventReactive(input$go, ignoreNULL = FALSE, {
if ("edad" %in% input$demog) {
process_data(
data = dff(),
outcome_var = outcome(),
recode_range = input$recode,
group_var = "edad",
var_label = "Age"
)
} else {
NULL
}
})
urdf <- eventReactive(input$go, ignoreNULL = FALSE, {
if ("ur" %in% input$demog) {
process_data(
data = dff(),
outcome_var = outcome(),
recode_range = input$recode,
group_var = "ur",
var_label = "Place of\nResidence"
)
} else {
NULL
}
})
# Combine =demographic data frames into one df
moverd <- eventReactive(input$go, ignoreNULL = FALSE, {
dta_mover <- Error(rbind(secdf(), genderdf(), edaddf(), wealthdf(), eddf(), urdf()))
validate(
need(dta_mover, "Error: no data available. Please verify that this question was asked in this country/year combination")
)
dta_mover$vallabel <- as.character(dta_mover$vallabel)
return(dta_mover)
})
moverg <- eventReactive(input$go, ignoreNULL = FALSE, {
moverg <- lapop_mover(moverd(),
subtitle = "% in selected category",
ymax = ifelse(any(moverd()$prop > 90, na.rm = TRUE), 119,
ifelse(any(moverd()$prop > 80, na.rm = TRUE), 109, 100)),
source_info = source_info_text())
return(moverg)
})
output$mover <- renderPlot({
return(moverg())
})
output$downloadPlot <- downloadHandler(
filename = function(file) {
ifelse(input$tabs == "Histogram", "hist.svg",
ifelse(input$tabs == "Time Series", "ts.svg",
ifelse(input$tabs == "Cross-Country", "cc.svg", "mover.svg")))
},
content = function(file) {
if(input$tabs == "Histogram") {
lapop_save(histg(), file)
} else if (input$tabs == "Time Series") {
lapop_save(tsg(), file)
} else if (input$tabs == "Cross Country") {
lapop_save(ccg(), file)
} else {
lapop_save(moverg(), file)
}
}
)
output$downloadTable <- downloadHandler(
filename = function(file) {
ifelse(input$tabs == "Histogram", "hist.csv",
ifelse(input$tabs == "Time Series", "ts.csv",
ifelse(input$tabs == "Cross-Country", "cc.csv", "mover.csv")))
},
content = function(file) {
if(input$tabs == "Histogram") {
write.csv(histd(), file)
} else if (input$tabs == "Time Series") {
write.csv(tsd(), file)
} else if (input$tabs == "Cross Country") {
write.csv(ccd(), file)
} else {
write.csv(moverd(), file)
}
}
)
}
shinyApp(ui, server)
vars_labels <- read.csv("variable_labels_shiny_v2.csv", encoding = "latin1")
runApp('app_working.R')
runApp('app_working.R')
runApp('app_es.R')
runApp('app_es.R')
runApp('app_es.R')
dstrata$jc10
runApp('app_working.R')
runApp('app_working.R')
library(lapop)
library(haven)
library(dplyr)
<<<<<<< Updated upstream
library(tidyr)
library(stringr)
library(shinyWidgets)
library(Hmisc)
lapop_fonts()
dstrata <- readRDS("gm_shiny_data.rds")
dstrata <- readRDS("gm_shiny_data_en.rds")
dstrata <- readRDS("Data Preprocessing/gm_shiny_data_en.rds")
labs <- readRDS("labs.rds")
vars_labels <- read.csv("variable_labels_shiny.csv", encoding = "latin1")
runApp('app_working.R')
runApp('app_es.R')
runApp('app_es.R')
runApp('app_es.R')
runApp('app_es.R')
devtools::install_github("https://github.com/lapop-central/lapop/", force=T)
detach("package:lapop", unload = TRUE)
detach("package:dplyr", unload = TRUE)
detach("package:utils", unload = TRUE)
detach("package:stats", unload = TRUE)
detach("package:grDevices", unload = TRUE)
detach("package:graphics", unload = TRUE)
detach("package:methods", unload = TRUE)
detach("package:datasets", unload = TRUE)
detach("package:stringr", unload = TRUE)
detach("package:tidyr", unload = TRUE)
devtools::install_github("https://github.com/lapop-central/lapop/", force=T)
install.packages("zoo")
install.packages("cli")
install.packages("scales")
install.packages("ggh4x")
devtools::install_github("https://github.com/lapop-central/lapop/", force=T)
devtools::install_github("https://github.com/lapop-central/lapop/", force=T)
install.packages("marginaleffects")
install.packages("data.table")
devtools::install_github("https://github.com/lapop-central/lapop/", force=T)
remove.packages("lapop")
devtools::install_github("https://github.com/lapop-central/lapop/", force=T)
renv::restart()
require(renv)
renv::restart()
devtools::load_all()
renv::status()
remove.packages("lapop")
devtools::install_github("https://github.com/lapop-central/lapop/")
devtools::install_local("C:/Users/rob/AppData/Local/Temp/Rtmpuc5a0K/file523473ec7144/lapop_2.0.4.tar.gz")
=======
library(haven)
library(srvyr)
# library(expss)
setwd("C:/Users/plutowl/Documents/GitHub/lapop-shiny/Data Preprocessing")
gm <- haven::read_dta("C:/Users/plutowl/Desktop/gm_en.dta")
pais_lab <- read.csv("pais_lab.csv")
gm <- merge(gm, pais_lab, by.x = "pais", by.y = "pais_num")
# table(as_factor(gm$pais))
expss::add_val_lab(gm$pais) = expss::num_lab("24 Guyana")
#gender - strictly men vs. women, only self-identification in 2021 and 2023
gm$genderm <- gm$sex
gm$genderm <- ifelse(is.na(gm$genderm) &  gm$q1tc_r < 3, gm$q1tc_r, gm$genderm)
gm$genderm <- ifelse(is.na(gm$genderm) &  gm$q1tb < 3, gm$q1tb, gm$genderm)
gm$genderm <- ifelse(is.na(gm$genderm) &  gm$usq1tc < 3, gm$usq1tc, gm$genderm)
gm$gendermc <- ifelse(gm$genderm == 1, "Men", "Women")
gm$edrer <- NA
gm$edrer <- ifelse(gm$edre < 3, 1,
ifelse(gm$edre <= 4, 2,
ifelse(gm$edre <= 6, 3, NA)))
gm$edrer <- ifelse(is.na(gm$edrer), gm$edr, gm$edrer)
gm$edrr <- ifelse(gm$wave < 2021 & is.na(gm$edrer) & gm$pais %in% c(1, 2, 3, 4, 6, 7, 9, 10, 12, 13, 14, 15, 26, 28),
cut(gm$ed,
breaks = c(-1, 0, 6, 12, 20),
labels = c("0", "1", "2", "3")),
NA)
gm$edrr <- ifelse(gm$wave < 2021 & is.na(gm$edrer) & is.na(gm$edrr) & gm$pais %in% c(5, 16, 11, 23, 24),
cut(gm$ed,
breaks = c(-1, 0, 6, 11, 20),
labels = c("0", "1", "2", "3")),
gm$edrr)
gm$edrr <- ifelse(gm$wave < 2021 & is.na(gm$edrer) & is.na(gm$edrr) & gm$pais %in% c(17, 30),
cut(gm$ed,
breaks = c(-1, 0, 7, 12, 20),
labels = c("0", "1", "2", "3")),
gm$edrr)
gm$edrr <- ifelse(gm$wave < 2021 & is.na(gm$edrer) & is.na(gm$edrr) & gm$pais == 8,
cut(gm$ed,
breaks = c(-1, 0, 5, 11, 20),
labels = c("0", "1", "2", "3")),
gm$edrr)
gm$edrr <- ifelse(gm$wave < 2021 & is.na(gm$edrer) & is.na(gm$edrr) & gm$pais == 21,
cut(gm$ed,
breaks = c(-1, 0, 8, 12, 20),
labels = c("0", "1", "2", "3")),
gm$edrr)
gm$edrr <- ifelse(gm$wave < 2021 & is.na(gm$edrer) & is.na(gm$edrr) & gm$pais == 22,
cut(gm$ed,
breaks = c(-1, 0, 7, 14, 20),
labels = c("0", "1", "2", "3")),
gm$edrr)
gm$edrr <- ifelse(gm$wave < 2021 & is.na(gm$edrer) & is.na(gm$edrr) & gm$pais == 25,
cut(gm$ed,
breaks = c(-1, 0, 5, 12, 20),
labels = c("0", "1", "2", "3")),
gm$edrr)
gm$edrr <- ifelse(gm$wave < 2021 & is.na(gm$edrer) & is.na(gm$edrr) & gm$pais == 27,
cut(gm$ed,
breaks = c(-1, 0, 6, 13, 20),
labels = c("0", "1", "2", "3")),
gm$edrr)
gm$edrr <- ifelse(gm$wave < 2021 & is.na(gm$edrer) & is.na(gm$edrr) & gm$pais == 40,
cut(gm$ed_usa,
breaks = c(-1, 0, 1, 2, 20),
labels = c("0", "1", "2", "3")),
gm$edrr)
gm$edrr <- ifelse(is.na(gm$edrer) & is.na(gm$edrr) & gm$pais == 41,
cut(gm$edcan,
breaks = c(-1, 0, 2, 4, 20),
labels = c("0", "1", "2", "3")),
gm$edrr)
gm$edrr2 <- gm$edrr - 1
gm$edrer <- ifelse(is.na(gm$edrer), gm$edrr2, gm$edrer)
gm$edrer <- ifelse(gm$edrer == 0, 1, gm$edrer)
gm$edrerf <- factor(gm$edrer,
levels = c(1, 2, 3),
labels = c("None/Primary", "Secondary", "Superior"))
gm$wealth[gm$wealth == 6] <- NA
gm$wealthf <- factor(gm$wealth,
levels = c(1, 2, 3, 4, 5),
labels = c("Low", "2", "3", "4", "High"))
gm$l1 <- ifelse(is.na(gm$l1), gm$ideology, gm$l1)
gm$l1 <- ifelse(is.na(gm$l1), gm$l1n, gm$l1)
gm$l1 <- ifelse(is.na(gm$l1), gm$l1bn, gm$l1)
gm$l1 <- ifelse(is.na(gm$l1), gm$l1b, gm$l1)
gm$l1 <- factor(gm$l1, labels = c("Left/liberal", "2", "3", "4", "5", "6", "7", "8", "9", "Right/conservative"))
# table(as.numeric(gmr$l1))
gm <- gm %>%
mutate(across(ur, ~ if_else(is.na(ur) & ur1new == 1, 1, .))) %>%
mutate(across(ur, ~ if_else(is.na(ur) & ur1new <= 4, 2, .)))
vars <- c(
"gendermc",
"wealthf",
"edrerf",
"edad",
"ur",
"estratopri",
"pais",
"year",
"wave",
"pais_nam",
"pais_lab",
"weight1500"
)
vars_labels <- read.csv("variable_labels_shiny.csv")
vars_labels$display_en <- paste0(vars_labels$category_short_en, ": ", vars_labels$question_short_en,
" (", vars_labels$column_name, ")", sep = "")
vars2 <- vars_labels$column_name
vars3 <- c(vars2, vars)
vars3 %in% names(gm)
vars3[!vars3 %in% names(gm)]
gmr <- gm[vars3]
saveRDS(gmr, "gmrstrata2.rds")
shiny::runApp('~/Documents/GitHub/lapop-shiny')
runApp('~/Documents/GitHub/lapop-shiny')
runApp('~/Documents/GitHub/lapop-shiny')
shiny::runApp()
gm <- readRDS("C:/Users/plutowl/Documents/GitHub/lapop-shiny/Data Preprocessing/gmrstrata2.rds")
gm$l1
gm$pais_lab
table(gm$pais_lab)
runApp()
install.packages("NCmisc")
list.functions.in.file("C:/Users/plutowl/Documents/GitHub/lapop-shiny/app.R", alphabetic = TRUE)
NCmisc::list.functions.in.file("C:/Users/plutowl/Documents/GitHub/lapop-shiny/app.R", alphabetic = TRUE)
runApp()
runApp()
runApp()
runApp()
renv::snapshot()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
<<<<<<< Updated upstream
renv::snapshot()
install.packages("renv")
renv::snapshot()
renv::snapshot()
renv::record("renv@1.1.1")
renv::snapshot()
install.packages("tidyr")
=======
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
renv::status()
>>>>>>> Stashed changes
>>>>>>> Stashed changes
