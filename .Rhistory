return(histg)
})
output$hist <- renderPlot({
return(histg())
})
# Time-series
tsd <- eventReactive(input$go, ignoreNULL = FALSE, {
dta_ts = Error(
dff() %>%
drop_na(outcome()) %>%
mutate(outcome_rec = case_when(
is.na(!!sym(outcome())) ~ NA_real_,
!!sym(outcome()) >= input$recode[1] &
!!sym(outcome()) <= input$recode[2] ~ 100,
TRUE ~ 0)) %>%
group_by(as.character(as_factor(wave))) %>%
summarise_at(vars("outcome_rec"),
list(~weighted.ttest.ci(., weight1500))) %>%
unnest_wider(col = "outcome_rec") %>%
mutate(proplabel = paste0(round(prop), "%")) %>%
rename(.,  wave = 1) %>%
filter(prop != 0)
)
validate(
need(dta_ts, "Error: no data available. Please verify that this question was asked in this country/year combination.")
)
dta_ts = merge(dta_ts, data.frame(wave = as.character(waves_total), empty = 1), by = "wave", all.y = TRUE)
return(omit_na_edges(dta_ts))
})
tsg <- eventReactive(input$go, ignoreNULL = FALSE, {
tsg = lapop_ts(tsd(),
ymax = ifelse(any(tsd()$prop > 88, na.rm = TRUE), 110, 100),
#label_vjust = -1.5,
label_vjust = ifelse(any(tsd()$prop > 80, na.rm = TRUE), -1.1, -1.5),
source_info = ", AmericasBarometer Data Playground",
subtitle = "% in selected category")
return(tsg)
})
output$ts <- renderPlot({
return(tsg())
})
# Cross-Country
ccd <- eventReactive(input$go, ignoreNULL = FALSE, {
dta_cc = Error(
dff() %>%
drop_na(outcome()) %>%
mutate(outcome_rec = case_when(
is.na(!!sym(outcome())) ~ NA_real_,
!!sym(outcome()) >= input$recode[1] &
!!sym(outcome()) <= input$recode[2] ~ 100,
TRUE ~ 0)) %>%
group_by(vallabel = pais_lab) %>%
summarise_at(vars("outcome_rec"),
list(~weighted.ttest.ci(., weight1500))) %>%
unnest_wider(col = "outcome_rec") %>%
filter(prop != 0) %>%
mutate(proplabel = paste0(round(prop), "%"))
)
validate(
need(dta_cc, "Error: no data available. Please verify that this question was asked in this country/year combination")
)
return(dta_cc)
})
ccg <- eventReactive(input$go, ignoreNULL = FALSE, {
ccg = lapop_cc(ccd(), sort = "hi-lo",
subtitle = "% in selected category",
ymax = ifelse(any(ccd()$prop > 90, na.rm = TRUE), 110, 100),
source_info = ", AmericasBarometer Data Playground")
return(ccg)
})
output$cc <- renderPlot({
return(ccg())
})
# Use function for each demographic breakdown variable
secdf <- eventReactive(input$go, ignoreNULL = FALSE, {
if (input$variable_sec == "None") {
NULL
} else {
process_data(
data = dff(),
outcome_var = outcome(),
recode_range = input$recode,
group_var = input$variable_sec,
var_label = stringr::str_wrap(variable_sec_lab(), width = 25)
)
}
})
genderdf <- eventReactive(input$go, ignoreNULL = FALSE, {
if ("gendermc" %in% input$demog) {
process_data(
data = dff(),
outcome_var = outcome(),
recode_range = input$recode,
group_var = "gendermc",
var_label = "Gender"
)
} else {
NULL
}
})
wealthdf <- eventReactive(input$go, ignoreNULL = FALSE, {
if ("wealth" %in% input$demog) {
process_data(
data = dff(),
outcome_var = outcome(),
recode_range = input$recode,
group_var = "wealthf",
var_label = "Wealth"
)
} else {
NULL
}
})
eddf <- eventReactive(input$go, ignoreNULL = FALSE, {
if ("edre" %in% input$demog) {
process_data(
data = dff(),
outcome_var = outcome(),
recode_range = input$recode,
group_var = "edrerf",
var_label = "Education"
)
} else {
NULL
}
})
edaddf <- eventReactive(input$go, ignoreNULL = FALSE, {
if ("edad" %in% input$demog) {
process_data(
data = dff(),
outcome_var = outcome(),
recode_range = input$recode,
group_var = "edad",
var_label = "Age"
)
} else {
NULL
}
})
urdf <- eventReactive(input$go, ignoreNULL = FALSE, {
if ("ur" %in% input$demog) {
process_data(
data = dff(),
outcome_var = outcome(),
recode_range = input$recode,
group_var = "ur",
var_label = "Place of\nResidence"
)
} else {
NULL
}
})
# Combine demographic data frames into one df
moverd <- eventReactive(input$go, ignoreNULL = FALSE, {
dta_mover <- Error(rbind(secdf(), genderdf(), edaddf(), wealthdf(), eddf(), urdf()))
validate(
need(dta_mover, "Error: no data available. Please verify that this question was asked in this country/year combination")
)
dta_mover$vallabel <- as.character(dta_mover$vallabel)
return(dta_mover)
})
moverg <- eventReactive(input$go, ignoreNULL = FALSE, {
moverg <- lapop_mover(moverd(),
subtitle = "% in selected category",
ymax = ifelse(any(moverd()$prop > 90, na.rm = TRUE), 119,
ifelse(any(moverd()$prop > 80, na.rm = TRUE), 109, 100)),
source_info = ", AmericasBarometer Data Playground")
return(moverg)
})
output$mover <- renderPlot({
return(moverg())
})
# Download figures
output$downloadPlot <- downloadHandler(
filename = function(file) {
ifelse(input$tabs == "Histogram", "hist.svg",
ifelse(input$tabs == "Time Series", "ts.svg",
ifelse(input$tabs == "Cross-Country", "cc.svg", "mover.svg")))
},
content = function(file) {
if(input$tabs == "Histogram") {
lapop_save(histg(), file)
} else if (input$tabs == "Time Series") {
lapop_save(tsg(), file)
} else if (input$tabs == "Cross Country") {
lapop_save(ccg(), file)
} else {
lapop_save(moverg(), file)
}
}
)
output$downloadTable <- downloadHandler(
filename = function(file) {
ifelse(input$tabs == "Histogram", "hist.csv",
ifelse(input$tabs == "Time Series", "ts.csv",
ifelse(input$tabs == "Cross-Country", "cc.csv", "mover.csv")))
},
content = function(file) {
if(input$tabs == "Histogram") {
write.csv(histd(), file)
} else if (input$tabs == "Time Series") {
write.csv(tsd(), file)
} else if (input$tabs == "Cross Country") {
write.csv(ccd(), file)
} else {
write.csv(moverd(), file)
}
}
)
}
shinyApp(ui, server)
# END
# END
# END
# END
# END
# END
# END
# END
# END
# END
# END
# END
# END
# END
# END
# END
# END
# END
# END
# END
# END
# END
# END
# END
# END
# END
# END
# END
# END
# END
?pickerInput
??pickerInput
library(shiny); runApp('app_es.R')
runApp('app_es_reviewed.R')
runApp('app_es_reviewed.R')
runApp('app_es_reviewed.R')
runApp('app_es_reviewed.R')
runApp('app_es_reviewed.R')
runApp('app_es_reviewed.R')
runApp('app_es_reviewed.R')
runApp('app_es_reviewed.R')
runApp('app_es_reviewed.R')
runApp('app_es_reviewed.R')
runApp('app_es_reviewed.R')
runApp('app_es_reviewed.R')
runApp('app_es_reviewed.R')
runApp('app_es_reviewed.R')
runApp('app_es_reviewed.R')
runApp('app_es_reviewed.R')
?pickerInput
runApp('app_es_reviewed.R')
runApp('app_es_reviewed.R')
runApp('app_es.R')
labs_es <- readRDS("C:/Users/rob/OneDrive - Vanderbilt/Documents/GitHub/lapop-shiny/labs_es.rds")
vars_labels <- read.csv("variable_labels_shiny.csv", encoding = "latin1")
vars_labels$column_name=="env2v"
vars_labels$column_name=="env2b"
vars_label[32]
vars_label[32,]
vars_labels[32,]
runApp('app_es.R')
runApp('app_es.R')
rsconnect::setAccountInfo(name='wbz4a3-robert0vidigal',
token='27963A17D9349A3E305242043C784872',
secret='c+CgxnWEJm4xEoQ8HQtGBhury5kmPnXmFfyEkNK1')
rsconnect::setAccountInfo(name='wbz4a3-robert0vidigal', token='27963A17D9349A3E305242043C784872', secret='c+CgxnWEJm4xEoQ8HQtGBhury5kmPnXmFfyEkNK1')
library(lapop)
library(haven)
library(dplyr)
library(tidyr)
library(shiny)
library(stringr)
library(shinyWidgets)
library(Hmisc)
runApp('app_es.R')
library(shiny); runApp('app_es.R')
library(lapop)
library(haven)
library(dplyr)
library(tidyr)
library(shiny)
library(stringr)
library(shinyWidgets)
library(Hmisc)
lapop_fonts()
dstrata <- readRDS("gm_shiny_data_es.rds")
labs <- readRDS("labs_es.rds")
vars_labels <- read.csv("variable_labels_shiny.csv", encoding = "latin1")
vars_labels$category_short_es
runApp('app_es.R')
runApp('app_es.R')
labs
getwd()
runApp('app_es.R')
library(dplyr)
library(haven)
library(srvyr)
#if creating spanish version, set to true
esp <- TRUE
setwd("./Documents/GitHub/lapop-shiny/Data Preprocessing")
library(dplyr)
library(haven)
library(srvyr)
#if creating spanish version, set to true
esp <- TRUE
setwd("./Documents/GitHub/lapop-shiny/Data Preprocessing")
library(dplyr)
library(haven)
library(srvyr)
#if creating spanish version, set to true
esp <- TRUE
#read in gm data created from Stata do file
# adjust your filepath here
# path <- "C:/Users/plutowl/Desktop/"
gm <- haven::read_dta(paste0(path, "gm_", ifelse(esp, "es", "en"), ".dta"))
if (esp) {
pais_lab$pais_nam <- pais_lab$pais_nam_es
}
gm <- merge(gm, pais_lab, by.x = "pais", by.y = "pais_num")
expss::add_val_lab(gm$pais) = expss::num_lab("24 Guyana")
pais_lab <- read.csv("./Data Preprocessing/pais_lab.csv")
library(dplyr)
library(haven)
library(srvyr)
#if creating spanish version, set to true
esp <- TRUE
#read in gm data created from Stata do file
# adjust your filepath here
# path <- "C:/Users/plutowl/Desktop/"
gm <- haven::read_dta(paste0(path, "gm_", ifelse(esp, "es", "en"), ".dta"))
#read in gm data created from Stata do file
# adjust your filepath here
path <- getwd()
gm <- haven::read_dta(paste0(path, "gm_", ifelse(esp, "es", "en"), ".dta"))
# Read in RAW grand merge (gm) data created from Stata do file
path <- "C:/Users/rob/Box/Rob LAPOP/data/Grand_Merge_2004-2023_LAPOP_AmericasBarometer_v1.0_w.dta" # adjust your filepath here
gm <- haven::read_dta(paste0(path, "gm_", ifelse(esp, "es", "en"), ".dta"))
# Read in RAW grand merge (gm) data created from Stata do file
path <- "C:/Users/rob/Box/Rob LAPOP/data/" # adjust your filepath here
gm <- haven::read_dta(paste0(path, "gm_", ifelse(esp, "es", "en"), ".dta"))
library(dplyr)
library(haven)
library(srvyr)
# If creating spanish version, set to true
esp <- TRUE
# Read in RAW grand merge (gm) data created from Stata do file
path <- "C:/Users/rob/Box/Rob LAPOP/data/" # adjust your filepath here
gm <- haven::read_dta(paste0(path, "gm_", ifelse(esp, "es", "en"), ".dta"))
rm(list=ls())
# If creating spanish version, set to true
esp <- TRUE
# Read in RAW grand merge (gm) data created from Stata do file
path <- "C:/Users/rob/Box/Rob LAPOP/data/" # adjust your filepath here
gm <- haven::read_dta(paste0(path, "gm_", ifelse(esp, "es", "en"), ".dta"))
pais_lab <- read.csv("Data Preprocessing/pais_lab.csv")
if (esp) {
pais_lab$pais_nam <- pais_lab$pais_nam_es
}
gm <- merge(gm, pais_lab, by.x = "pais", by.y = "pais_num")
expss::add_val_lab(gm$pais) = expss::num_lab("24 Guyana")
getwd()
#gender - strictly men vs. women, only self-identification in 2021 and 2023
gm$genderm <- gm$sex
gm$genderm <- ifelse(is.na(gm$genderm) &  gm$q1tc_r < 3, gm$q1tc_r, gm$genderm)
gm$genderm <- ifelse(is.na(gm$genderm) &  gm$q1tb < 3, gm$q1tb, gm$genderm)
gm$genderm <- ifelse(is.na(gm$genderm) &  gm$usq1tc < 3, gm$usq1tc, gm$genderm)
gm$gendermc <- ifelse(gm$genderm == 1, ifelse(esp, "Hombres", "Men"),
ifelse(esp, "Mujeres", "Women"))
gm$edrer <- NA
gm$edrer <- ifelse(gm$edre < 3, 1,
ifelse(gm$edre <= 4, 2,
ifelse(gm$edre <= 6, 3, NA)))
gm$edrer <- ifelse(is.na(gm$edrer), gm$edr, gm$edrer)
gm$edrr <- ifelse(gm$wave < 2021 & is.na(gm$edrer) & gm$pais %in% c(1, 2, 3, 4, 6, 7, 9, 10, 12, 13, 14, 15, 26, 28),
cut(gm$ed,
breaks = c(-1, 0, 6, 12, 20),
labels = c("0", "1", "2", "3")),
NA)
gm$edrr <- ifelse(gm$wave < 2021 & is.na(gm$edrer) & is.na(gm$edrr) & gm$pais %in% c(5, 16, 11, 23, 24),
cut(gm$ed,
breaks = c(-1, 0, 6, 11, 20),
labels = c("0", "1", "2", "3")),
gm$edrr)
gm$edrr <- ifelse(gm$wave < 2021 & is.na(gm$edrer) & is.na(gm$edrr) & gm$pais %in% c(17, 30),
cut(gm$ed,
breaks = c(-1, 0, 7, 12, 20),
labels = c("0", "1", "2", "3")),
gm$edrr)
gm$edrr <- ifelse(gm$wave < 2021 & is.na(gm$edrer) & is.na(gm$edrr) & gm$pais == 8,
cut(gm$ed,
breaks = c(-1, 0, 5, 11, 20),
labels = c("0", "1", "2", "3")),
gm$edrr)
gm$edrr <- ifelse(gm$wave < 2021 & is.na(gm$edrer) & is.na(gm$edrr) & gm$pais == 21,
cut(gm$ed,
breaks = c(-1, 0, 8, 12, 20),
labels = c("0", "1", "2", "3")),
gm$edrr)
gm$edrr <- ifelse(gm$wave < 2021 & is.na(gm$edrer) & is.na(gm$edrr) & gm$pais == 22,
cut(gm$ed,
breaks = c(-1, 0, 7, 14, 20),
labels = c("0", "1", "2", "3")),
gm$edrr)
gm$edrr <- ifelse(gm$wave < 2021 & is.na(gm$edrer) & is.na(gm$edrr) & gm$pais == 25,
cut(gm$ed,
breaks = c(-1, 0, 5, 12, 20),
labels = c("0", "1", "2", "3")),
gm$edrr)
gm$edrr <- ifelse(gm$wave < 2021 & is.na(gm$edrer) & is.na(gm$edrr) & gm$pais == 27,
cut(gm$ed,
breaks = c(-1, 0, 6, 13, 20),
labels = c("0", "1", "2", "3")),
gm$edrr)
gm$edrr <- ifelse(gm$wave < 2021 & is.na(gm$edrer) & is.na(gm$edrr) & gm$pais == 40,
cut(gm$ed_usa,
breaks = c(-1, 0, 1, 2, 20),
labels = c("0", "1", "2", "3")),
gm$edrr)
gm$edrr <- ifelse(is.na(gm$edrer) & is.na(gm$edrr) & gm$pais == 41,
cut(gm$edcan,
breaks = c(-1, 0, 2, 4, 20),
labels = c("0", "1", "2", "3")),
gm$edrr)
gm$edrr2 <- gm$edrr - 1
gm$edrer <- ifelse(is.na(gm$edrer), gm$edrr2, gm$edrer)
gm$edrer <- ifelse(gm$edrer == 0, 1, gm$edrer)
gm$edrerf <- factor(gm$edrer,
levels = c(1, 2, 3),
labels = ifelse(esp,
c("Ninguna/primaria", "Secundaria", "Superior"),
c("None/Primary", "Secondary", "Superior")))
gm$wealth[gm$wealth == 6] <- NA
gm$wealthf <- factor(gm$wealth,
levels = c(1, 2, 3, 4, 5),
labels = ifelse(esp,
c("Baja", "2", "3", "4", "Alta"),
c("Low", "2", "3", "4", "High")))
gm$l1 <- ifelse(is.na(gm$l1), gm$ideology, gm$l1)
gm$l1 <- ifelse(is.na(gm$l1), gm$l1n, gm$l1)
gm$l1 <- ifelse(is.na(gm$l1), gm$l1bn, gm$l1)
gm$l1 <- ifelse(is.na(gm$l1), gm$l1b, gm$l1)
if (esp) {
gm$l1 = labelled(gm$l1,
c("Izquierda/liberal" = 1, "Derecha/conservador" = 10),
label = "Ideología")
} else {
gm$l1 = labelled(gm$l1,
c("Left/liberal" = 1, "Right/conservative" = 10),
label = "Ideology")
}
gm <- gm %>%
mutate(across(ur, ~ if_else(is.na(ur) & ur1new == 1, 1, .))) %>%
mutate(across(ur, ~ if_else(is.na(ur) & ur1new <= 4, 2, .)))
vars <- c(
"gendermc",
"wealthf",
"edrerf",
"edad",
"ur",
"pais",
"year",
"estratopri",
"wave",
"pais_nam",
"pais_lab",
"weight1500"
)
vars_labels <- read.csv("variable_labels_shiny.csv", encoding = "latin1")
if (esp) {
vars_labels$display_es <- paste0(vars_labels$category_short_es, ": ", vars_labels$question_short_es,
" (", vars_labels$column_name, ")", sep = "")
} else {
vars_labels$display_en <- paste0(vars_labels$category_short_en, ": ", vars_labels$question_short_en,
" (", vars_labels$column_name, ")", sep = "")
}
vars2 <- vars_labels$column_name
vars3 <- c(vars2, vars)
# verify all variables are present
vars3 %in% names(gm)
vars3[!vars3 %in% names(gm)]
gmr <- gm[vars3]
saveRDS(gmr, paste0("gm_shiny_data_", ifelse(esp, "es", "en"), ".rds"))
if (esp) {
labs <- vars_labels$column_name
names(labs) <- vars_labels$display_es
labs[order(names(labs))]
names(vars_labels$column_name) <- vars_labels$display_es
vars_labels$labs2 <- labs
vars_labels$question_es_comp <- paste0(vars_labels$question_es, vars_labels$responses_es_rec, sep = " ")
saveRDS(labs, "labs_es.rds")
} else {
labs <- vars_labels$column_name
names(labs) <- vars_labels$display_en
labs[order(names(labs))]
names(vars_labels$column_name) <- vars_labels$display_en
vars_labels$labs2 <- labs
vars_labels$question_en_comp <- paste0(vars_labels$question_en, vars_labels$responses_en_rec, sep = " ")
saveRDS(labs, "labs_en.rds")
}
labs
runApp('app_es.R')
