ggplot(data, aes(x=factor(cat_var, levels = cat_var), y = outcome_var)) +
geom_bar(stat = "identity", color = color_scheme, fill = paste0(color_scheme, "28"), width = 0.75) +
geom_text(aes(label=label_var), vjust=-0.5, size = 5, fontface = "bold", color = color_scheme) +
scale_y_continuous(limits = c(ymin, ymax), expand = c(0, 0.3), labels = function(x) paste0(x, "%")) +
labs(title=main_title,
y = "",
x = "",
caption = paste0(ifelse(lang == "es", "Fuente: ", "Source: "),
source_info),
subtitle = subtitle) +
theme(text = element_text(size = 14, family = "roboto"),
plot.title = element_text(size = 18, family = "nunito", face = "bold"),
plot.caption = element_text(size = 10.5, hjust = 0, vjust = 2, family = "nunito", color="#585860"),
plot.subtitle = element_text(size = 13, family = "nunito-light", color="#585860"),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
plot.title.position = "plot",
plot.caption.position = "plot",
axis.text = element_text(size = 14, family = "roboto-light", color = "#585860"),
panel.grid = element_line(color = "#dddddf"),
panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank())
}
lapop_hist2 <- function(data, outcome_var = data$prop, label_var = data$proplabel,
cat_var = data$cat,
ymin = 0,
ymax = 100,
lang = "en",
main_title = "",
subtitle = "",
source_info = "",
order = FALSE,
color_scheme = "#008381"){
if(order == TRUE){
data = data[order(-data$prop), ]
cat_var = cat_var[order(-outcome_var)]
label_var = label_var[order(-outcome_var)]
outcome_var = outcome_var[order(-outcome_var)]
}
update_geom_defaults("text", list(family = "roboto"))
ggplot(data, aes(x=factor(cat_var, levels = cat_var), y = outcome_var)) +
geom_bar(stat = "identity", color = color_scheme, fill = paste0(color_scheme, "28"), width = 0.75) +
geom_text(aes(label=label_var), vjust=-0.5, size = 5, fontface = "bold", color = color_scheme) +
scale_y_continuous(limits = c(ymin, ymax), expand = c(0, 0.3), labels = function(x) str_wrap(paste0(x, "%"), width = 10)) +
labs(title=main_title,
y = "",
x = "",
caption = paste0(ifelse(lang == "es", "Fuente: ", "Source: "),
source_info),
subtitle = subtitle) +
theme(text = element_text(size = 14, family = "roboto"),
plot.title = element_text(size = 18, family = "nunito", face = "bold"),
plot.caption = element_text(size = 10.5, hjust = 0, vjust = 2, family = "nunito", color="#585860"),
plot.subtitle = element_text(size = 13, family = "nunito-light", color="#585860"),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
plot.title.position = "plot",
plot.caption.position = "plot",
axis.text = element_text(size = 14, family = "roboto-light", color = "#585860"),
panel.grid = element_line(color = "#dddddf"),
panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank())
}
runApp('Documents/GitHub/lapop-shiny')
vb20_hist <- read.csv("C:/Users/plutowl/Downloads/vb20_hist.csv")
lapop_hist(vb20_hist)
lapop_hist2(vb20_hist)
library(stringr)
lapop_hist2(vb20_hist)
lapop_hist2 <- function(data, outcome_var = data$prop, label_var = data$proplabel,
cat_var = data$cat,
ymin = 0,
ymax = 100,
lang = "en",
main_title = "",
subtitle = "",
source_info = "",
order = FALSE,
color_scheme = "#008381"){
if(order == TRUE){
data = data[order(-data$prop), ]
cat_var = cat_var[order(-outcome_var)]
label_var = label_var[order(-outcome_var)]
outcome_var = outcome_var[order(-outcome_var)]
}
update_geom_defaults("text", list(family = "roboto"))
ggplot(data, aes(x=factor(cat_var, levels = cat_var), y = outcome_var)) +
geom_bar(stat = "identity", color = color_scheme, fill = paste0(color_scheme, "28"), width = 0.75) +
geom_text(aes(label=label_var), vjust=-0.5, size = 5, fontface = "bold", color = color_scheme) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
scale_y_continuous(limits = c(ymin, ymax), expand = c(0, 0.3), labels = function(x) paste0(x, "%")) +
labs(title=main_title,
y = "",
x = "",
caption = paste0(ifelse(lang == "es", "Fuente: ", "Source: "),
source_info),
subtitle = subtitle) +
theme(text = element_text(size = 14, family = "roboto"),
plot.title = element_text(size = 18, family = "nunito", face = "bold"),
plot.caption = element_text(size = 10.5, hjust = 0, vjust = 2, family = "nunito", color="#585860"),
plot.subtitle = element_text(size = 13, family = "nunito-light", color="#585860"),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
plot.title.position = "plot",
plot.caption.position = "plot",
axis.text = element_text(size = 14, family = "roboto-light", color = "#585860"),
panel.grid = element_line(color = "#dddddf"),
panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank())
}
lapop_hist2(vb20_hist)
vb20_hist$cat
str_wrap(vb20_hist$cat)
vb20_hist$cat <- str_wrap(vb20_hist$cat, width = 12)
lapop_hist(vb20_hist)
vb20_hist$cat <- str_wrap(vb20_hist$cat, width = 5)
lapop_hist(vb20_hist)
vb20_hist <- read.csv("C:/Users/plutowl/Downloads/vb20_hist.csv")
vb20_hist$cat <- str_wrap(vb20_hist$cat, width = 5)
lapop_hist(vb20_hist)
vb20_hist <- read.csv("C:/Users/plutowl/Downloads/vb20_hist.csv")
vb20_hist$cat <- str_wrap(vb20_hist$cat, width = 15)
lapop_hist(vb20_hist)
runApp('Documents/GitHub/lapop-shiny')
runApp('Documents/GitHub/lapop-shiny')
runApp('Documents/GitHub/lapop-shiny')
runApp('Documents/GitHub/lapop-shiny')
runApp('Documents/GitHub/lapop-shiny')
library(shiny)
runGitHub(repo = "lapop-central/lapop-shiny", ref = "main")
runApp('Documents/GitHub/lapop-shiny')
runApp('Documents/GitHub/lapop-shiny')
library(shiny)
runGitHub(repo = "lapop-central/lapop-shiny", ref = "main")
runGitHub(repo = "lapop-central/lapop-shiny", ref = "main")
library(shiny)
runGitHub(repo = "lapop-central/lapop-shiny", ref = "main")
runGitHub(repo = "lapop-central/lapop-shiny", ref = "main")
runGitHub(repo = "lapop-central/lapop-shiny", ref = "main")
library(shiny)
runGitHub(repo = "lapop-central/lapop-shiny", ref = "main")
?lapop_mline
library(lapop)
?lapop_mline
runGitHub(repo = "lapop-central/lapop-shiny", ref = "main")
library(shiny)
runGitHub(repo = "lapop-central/lapop-shiny", ref = "main")
?lapop_stack
?lapop_mline
library(lapop)
?lapop_mline
library(lapop)
?lapop_stack
shiny::runApp('Documents/GitHub/lapop-shiny')
t53535
runApp('Documents/GitHub/lapop-shiny')
library(lapop)
?lapop_cc
x <- read.csv("C:/Users/plutowl/Desktop/AB23_b18_coef.csv")
x
x <- read.csv("C:/Users/plutowl/Desktop/AB23_b18_coef.csv")
x
x$varlabel <- c("Crime victimization", "Trust in the president/\nprime minister",
"Positive evaluation of\nnational economic situation")
x
x$proplabel <- c("-0.32", "2.15", "-0.1")
x
lapop_coef(x)
library(lapop)
lapop_coef(x)
lapop_fonts()
lapop_coef(x)
lapop_save("C:/Users/plutowl/Desktop/AB23_b18_coef.svg")
lapop_save(x, "C:/Users/plutowl/Desktop/AB23_b18_coef.svg")
y <- lapop_coef(x, main_title = "Crime victimization, trust in the executive, and\neconomic evaluations predict trust in police")
lapop_save(y, "C:/Users/plutowl/Desktop/AB23_b18_coef.svg")
y <- lapop_coef(x, main_title = "Crime victimization, trust in the executive, and economic evaluations\npredict trust in police")
lapop_save(y, "C:/Users/plutowl/Desktop/AB23_b18_coef.svg")
y <- lapop_coef(x, main_title = "Crime victimization, trust in the executive, and economic evaluations predict\ntrust in police")
lapop_save(y, "C:/Users/plutowl/Desktop/AB23_b18_coef.svg")
y <- lapop_coef(x,
source_info = "xxxx",
main_title = "Crime victimization, trust in the executive, and economic evaluations predict\ntrust in police")
y
y <- lapop_coef(x,
source_info = "LAPOP Lab, AmericasBarometer 2023",
main_title = "Crime victimization, trust in the executive, and economic evaluations predict\ntrust in police")
lapop_save(y, "C:/Users/plutowl/Desktop/AB23_b18_coef.svg")
library(lapop)
lapop_fonts()
x <- read.csv("C:/Users/plutowl/Desktop/AB23_b18_coef.csv")
x$proplabel <- c("-0.32", "2.15", "-0.14")
x <- read.csv("C:/Users/plutowl/Desktop/AB23_b18_coef.csv")
library(lapop)
lapop_fonts()
x <- read.csv("C:/Users/plutowl/Desktop/AB23_b18_coef.csv")
x$varlabel <- c("Crime victimization", "Trust in the president/\nprime minister",
"Positive evaluation of\nnational economic situation")
x$proplabel <- c("-0.32", "2.15", "-0.14")
y <- lapop_coef(x,
source_info = "LAPOP Lab, AmericasBarometer 2023",
main_title = "Crime victimization, trust in the executive, and economic evaluations predict\ntrust in police")
lapop_save(y, "C:/Users/plutowl/Desktop/AB23_b18_coef.svg")
shiny::runApp('Documents/GitHub/lapop-shiny')
gc()
shiny::runApp('Documents/GitHub/lapop-shiny')
install.packages('rsconnect')
install.packages("PKI")
install.packages("Rtools")
R.version
install.packages("Rtools42")
setwd("C:/Users/plutowl/Documents/GitHub/lapop-shiny")
dstrata <- readRDS("data/gmrstrata.rds")
dstrata$variables$year
install.packages("PKI")
Sys.getenv("PATH")
library(profvis)
profvis({ runApp("C:\Users\plutowl\Documents\GitHub\lapop-shiny\app.R") })
profvis({ runApp("C:/Users/plutowl/Documents/GitHub/lapop-shiny/app.R") })
install.packages("profvis")
library(profvis)
profvis({ runApp("C:/Users/plutowl/Documents/GitHub/lapop-shiny/app.R") })
library(shiny)
profvis({RunApp("C:/Users/plutowl/Documents/GitHub/lapop-shiny/app.R") })
profvis({runApp("C:/Users/plutowl/Documents/GitHub/lapop-shiny/app.R") })
renv::dependencies()
renv::snapshot()
install.packages("RcppArmadillo")
renv::snapshot()
ds <- readRDS("gmrstrata2.rds")
ds <- readRDS("gmrstrata.rds")
ds2 <- ds %>%
select(pais == 1)
library(dplyr)
ds2 <- ds %>%
select(pais == 1)
ds2 <- ds %>%
select(pais == 1)
ds2 <- ds %>%
filter(pais == 1)
ds
class(ds)
ds2 <- ds %>%
dplyr::filter(pais == 1)
library(srvyr)
ds2 <- ds %>%
filter(pais == 1)
ds2 <- ds %>%
filter(pais == 1 | pais == 2)
ds2 <- ds %>%
filter(pais == 1 | pais == 2) %>%
filter(wave == 2021 | wave == 2023)
ds2 <- ds %>%
filter(pais == 1 | pais == 2) %>%
filter(year == 2021 | year == 2023)
ds2 <- ds %>%
filter(pais == 1 | pais == 2) %>%
filter(year == 2021)
ds$variables$year
class(ds$variables$year)
table((ds$variables$year))
table(ds$variables$year)
ds2 <- ds %>%
filter(pais == 1 | pais == 2) %>%
filter(year == 2021)
ds2 <- ds %>%
filter(pais == 1 | pais == 2) %>%
filter(as_factor(wave) == 2021)
library(haven)
ds2 <- ds %>%
filter(pais == 1 | pais == 2) %>%
filter(as_factor(wave) == 2021)
library(haven)
install.packages("haven")
library(haven)
ds2 <- ds %>%
filter(pais == 1 | pais == 2) %>%
filter(haven::as_factor(wave) == 2021)
saveRDS(ds2, "gmrstrata2.rds")
ds2 <- ds %>%
# filter(pais == 1 | pais == 2) %>%
filter(haven::as_factor(wave) > 2015)
ds <- readRDS("gmrstrata.rds")
ds2 <- ds %>%
# filter(pais == 1 | pais == 2) %>%
filter(haven::as_factor(wave) > 2015)
ds2 <- ds %>%
filter(haven::as_factor(wave) > 2015)
ds2 <- ds %>%
filter(haven::as.numeric(as_factor(wave)) > 2015)
ds2 <- ds %>%
filter(as.numeric(haven::as_factor(wave)) > 2015)
ds2
table(ds2$variables$wave)
ds2$variables$wave
ds2 <- ds %>%
filter(!haven::as_factor(wave) == 2004)
ds2 <- ds %>%
filter(!haven::as_factor(wave) == 2004) %>%
filter(!haven::as_factor(wave) == 2006) %>%
filter(!haven::as_factor(wave) == 2008) %>%
filter(!haven::as_factor(wave) == 2010) %>%
filter(!haven::as_factor(wave) == 2012)
saveRDS(ds2, "gmrstrata2.rds")
ds2 <- ds %>%
filter(haven::as_factor(wave) == 2018) %>%
filter(haven::as_factor(wave) == 2021) %>%
filter(haven::as_factor(wave) == 2023)
saveRDS(ds2, "gmrstrata2.rds")
ds2 <- ds %>%
filter(haven::as_factor(wave) == 2018 | haven::as_factor(wave) == 2021 |
haven::as_factor(wave) == 2023)
saveRDS(ds2, "gmrstrata2.rds")
haven::as_factor(wave)
table(ds2$variables$wave)
as_factor(ds2$variables$wave)
haven::as_factor(ds2$variables$wave)
haven::as_factor(ds$variables$wave)
ds2 <- ds %>%
filter(haven::as_factor(wave) == "2018" | haven::as_factor(wave) == "2021" |
haven::as_factor(wave) == "2023")
haven::as_factor(ds$variables$wave)
haven::as_factor(ds2$variables$wave)
haven::as_factor(ds2$variables$wave)
table(ds2$variables$wave)
table(ds$variables$wave)
ds2 <- ds %>%
filter(haven::as_factor(wave) == 2018 | haven::as_factor(wave) == 2021 |
haven::as_factor(wave) == 2023)
haven::as_factor(ds2$variables$wave)
table(ds$variables$wave)
table(ds2$variables$wave)
ds2 <- ds %>%
filter(haven::as_factor(wave) == 2004 | haven::as_factor(wave) == 2021 |
haven::as_factor(wave) == 2023)
table(ds2$variables$wave)
ds2 <- ds %>%
filter(haven::as_factor(wave) == 2004 |
haven::as_factor(wave) == 2021 |
haven::as_factor(wave) == 2023 |
haven::as_factor(wave) == 2006 |
haven::as_factor(wave) == 2008)
saveRDS(ds2, "gmrstrata2.rds")
ds <- readRDS("gmrstrata.rds")
ds2 <- ds %>%
filter(haven::as_factor(wave) == 2004 |
haven::as_factor(wave) == 2021 |
haven::as_factor(wave) == 2023)
library(srvyr)
ds2 <- ds %>%
filter(haven::as_factor(wave) == 2004 |
haven::as_factor(wave) == 2021 |
haven::as_factor(wave) == 2023)
saveRDS(ds2, "gmrstrata2.rds")
ds <- readRDS("gmrstrata.rds")
ds2 <- ds %>%
filter(pais == 1)
library(dplyr)
ds2 <- ds %>%
filter(pais == 1)
library(srvyr)
ds2 <- ds %>%
filter(pais == 1)
saveRDS(ds2, "gmrstrata2.rds")
ds2 <- ds %>%
filter(haven::as_factor(wave) == 2004 |
haven::as_factor(wave) == 2021 |
haven::as_factor(wave) == 2023)
saveRDS(ds2, "gmrstrata2.rds")
install.packages("bench")
library(bench)
shiny::runApp()
runApp()
runApp()
measure_mem_usage <- function() {
result_file <- tempfile(fileext = "RDS")
port <- httpuv::randomPort()
app_process <- callr::r_bg(
function(result_file, port) {
on.exit({
saveRDS(bench::bench_process_memory(), result_file)
})
shiny::runApp(port = port)
}, args = list(result_file = result_file, port = port))
on.exit({
if (app_process$is_alive()) {
app_process$kill()
}
})
app_url <- paste0("http://127.0.0.1:", port)
wait_for_app_to_start(app_url)
utils::browseURL(app_url)
cat ("Press [enter] to finish the test...")
line <- readline()
app_process$interrupt()
app_process$wait()
readRDS(result_file)
}
runApp()
measure_mem_usage()
wait_for_app_to_start <- function(url) { httr2::request(url) |>
httr2::req_retry(
max_seconds = 5,
backoff = function(attempt) 2 ** attempt
)
}
measure_mem_usage <- function() {
result_file <- tempfile(fileext = "RDS")
port <- httpuv::randomPort()
app_process <- callr::r_bg(
function(result_file, port) {
on.exit({
saveRDS(bench::bench_process_memory(), result_file)
})
shiny::runApp(port = port)
}, args = list(result_file = result_file, port = port))
on.exit({
if (app_process$is_alive()) {
app_process$kill()
}
})
app_url <- paste0("http://127.0.0.1:", port)
wait_for_app_to_start(app_url)
utils::browseURL(app_url)
cat ("Press [enter] to finish the test...")
line <- readline()
app_process$interrupt()
app_process$wait()
readRDS(result_file)
}
measure_mem_usage()
install.packages("httr2")
wait_for_app_to_start <- function(url) { httr2::request(url) |>
httr2::req_retry(
max_seconds = 5,
backoff = function(attempt) 2 ** attempt
)
}
measure_mem_usage <- function() {
result_file <- tempfile(fileext = "RDS")
port <- httpuv::randomPort()
app_process <- callr::r_bg(
function(result_file, port) {
on.exit({
saveRDS(bench::bench_process_memory(), result_file)
})
shiny::runApp(port = port)
}, args = list(result_file = result_file, port = port))
on.exit({
if (app_process$is_alive()) {
app_process$kill()
}
})
app_url <- paste0("http://127.0.0.1:", port)
wait_for_app_to_start(app_url)
utils::browseURL(app_url)
cat ("Press [enter] to finish the test...")
line <- readline()
app_process$interrupt()
app_process$wait()
readRDS(result_file)
}
measure_mem_usage()
wait_for_app_to_start <- function(url) { httr2::request(url) |>
httr2::req_retry(
max_seconds = 5,
backoff = function(attempt) 2 ** attempt
)
}
measure_mem_usage <- function() {
result_file <- tempfile(fileext = "RDS")
port <- httpuv::randomPort()
app_process <- callr::r_bg(
function(result_file, port) {
on.exit({
saveRDS(bench::bench_process_memory(), result_file)
})
shiny::runApp(port = port)
}, args = list(result_file = result_file, port = port))
on.exit({
if (app_process$is_alive()) {
app_process$kill()
}
})
app_url <- paste0("http://127.0.0.1:", port)
wait_for_app_to_start(app_url)
utils::browseURL(app_url)
cat ("Press [enter] to finish the test...")
line <- readline()
app_process$interrupt()
app_process$wait()
readRDS(result_file)
}
shiny::runApp()
measure_mem_usage()
?lpr_data
library(lapop)
?lpr_data
?lpr_mline
renv::status()
install.packages("expss")
renv::snapshot()
profvis({
runApp()
})
library(profvis)
profvis({
runApp()
})
shiny::runApp()
profvis({shiny::runApp()})
library(lapop)
